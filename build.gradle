buildscript {
  repositories {
    maven {
      name 'forge'
      url 'https://files.minecraftforge.net/maven'
    }
    maven {
      name 'sponge'
      url 'https://repo.spongepowered.org/repository/maven-public'
    }
    mavenCentral()
  }
  dependencies {
    classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
  }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

apply from: 'https://raw.githubusercontent.com/SizableShrimp/Forge-Class-Remapper/main/classremapper.gradle'

def isCI = System.getenv("GITHUB_ACTION")
def nightly = System.getenv("GITHUB_NIGHTLY")
def ref = System.getenv("GITHUB_PR_NUMBER")

def tag = nightly ? "NIGHTLY" : "CI"
def suffix = "-${tag}" + (ref ? "-${ref}" : "")

// does in fact follow the semantic versioning. (GAMEVER)-(MODMAJOR.MODMINOR.MODPATCH)-CIMETA-RUNID.RUNINT
version = "${minecraft_version}-${mod_version}"
if(isCI) {
  version = version + suffix
}
group = 'mods.railcraft'
archivesBaseName = 'railcraft'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(17)
  }
}

println('')
println('*************************************************************')
println('Project Version: ' + version)
if (isCI) {
  println("Running in Github Workflow ${tag}" + (ref ? " on a pull request ${ref}." : "."))
}
println('Java: ' + System.getProperty('java.version'))
println('JVM: ' + System.getProperty('java.vm.version'))
println('*************************************************************')
println('')

minecraft {
  mappings channel: 'official', version: "${project.minecraft_version}"

  accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

  runs {
    client {
      workingDirectory project.file('run/client')

      property 'forge.logging.console.level', 'debug'

      args '--mixin', 'railcraft.mixins.json'

      mods {
        railcraft {
          source sourceSets.main
        }
      }
    }

    server {
      workingDirectory project.file('run/server')

      property 'forge.logging.console.level', 'debug'

      args '--mixin', 'railcraft.mixins.json'

      mods {
        railcraft {
          source sourceSets.main
        }
      }
    }

    data {
      workingDirectory project.file('run/data')

      property 'forge.logging.console.level', 'debug'

      args '--mod', 'railcraft', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

      mods {
        railcraft {
          source sourceSets.main
        }
      }
    }
  }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
  maven {
    name 'sponge'
    url 'https://repo.spongepowered.org/repository/maven-public'
  }
  // TODO jei implementation
}

dependencies {
  minecraft "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"
  implementation group: 'org.spongepowered', name: 'mixin', version: "${project.mixin_version}"
  annotationProcessor("org.spongepowered:mixin:${project.mixin_version}:processor")
  testAnnotationProcessor("org.spongepowered:mixin:${project.mixin_version}:processor")
}

jar {
  finalizedBy('reobfJar')
  manifest {
    attributes([
      "Implementation-Title": project.name,
      "Implementation-Version": project.version,
      "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
      "MixinConfigs": 'railcraft.mixins.json'
    ])
  }
  exclude "**/*.bat"
  exclude "**/*.psd"
  exclude "**/*.exe"
  exclude "**/*.db"  // windows thumbs.db cache
}

mixin {
  add sourceSets.main, 'railcraft.refmap.json'
}
