buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
    }
}

apply plugin: 'net.minecraftforge.gradle'
// apply plugin: 'org.spongepowered.mixin' // Tested, not needed but leaving it here for reference
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

// does in fact follow the semantic versioning. (GAMEVER)-(MODMAJOR.MODMINOR.MODPATCH)
version = "${project.minecraft_version}-${project.version}"
group = 'mods.railcraft'
archivesBaseName = 'railcraft'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

println('')
println('*************************************************************')
println('Project Version: ' + version)
println('Java: ' + System.getProperty('java.version'))
println('JVM: ' + System.getProperty('java.vm.version'))
println('*************************************************************')
println('')

minecraft {
    mappings channel: 'official', version: "${project.minecraft_version}"
    // TODO: check if we need to transform stuff.
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run/client')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            // args '--mixin', 'railcraft.mixins.json'

            mods {
                railcraft {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run/server')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            // args '--mixin', 'railcraft.mixins.json'

            mods {
                railcraft {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run/data')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'railcraft', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            mods {
                railcraft {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

// repositories {
//     maven {
//         name 'sponge'
//         url 'https://repo.spongepowered.org/repository/maven-public/'
//     }
// }

dependencies {
    minecraft "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"
    // implementation group: 'org.spongepowered', name: 'mixin', version: "${mixin_version}"
    // annotationProcessor("org.spongepowered:mixin:${mixin_version}:processor")
    // testAnnotationProcessor("org.spongepowered:mixin:${mixin_version}:processor")
}

jar {
    manifest {
        attributes([
            "Specification-Title": "railcraft",
            "Specification-Vendor": "VENDOR",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": "railcraft",
            "Implementation-Version": version,
            "Implementation-Vendor" :"VENDOR",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "MixinConfigs": 'railcraft.mixins.json'
        ])
    }
}

// mixin {
// 	add sourceSets.main, "railcraft.refmap.json"
// }

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
