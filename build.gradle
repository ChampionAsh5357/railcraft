import se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask
import static org.apache.commons.lang3.StringUtils.repeat

plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle' version '[6.0.18,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.spongepowered.mixin' version '0.7.+'
    id 'se.bjurr.gitchangelog.git-changelog-gradle-plugin' version '1.77.2'
    id 'me.modmuss50.mod-publish-plugin' version '0.3.3'
}

def isCI = System.getenv('GITHUB_ACTION')
def ref = System.getenv('GITHUB_PR_NUMBER')

// does in fact follow the semantic versioning. (GAMEVER)-(MAJOR.MINOR.PATCH)[-CI][-RUNID.RUNINT]-HASH
version = "$minecraft_version-$mod_version"
if (isCI) {
    def suffix = "-CI-" + (ref ? "$ref-" : '')
    version = version + suffix + 'git rev-parse --short HEAD'.execute().text.trim()
}

group = 'mods.railcraft'
base {
    archivesName = 'railcraft-reborn'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

println(repeat('*', 60))
println("Project Version: $version")
if (isCI) {
    println("Running in GitHub Actions" + (ref ? " pull request $ref." : '.'))
}
println("Java: ${System.getProperty('java.version')}")
println("JVM: ${System.getProperty('java.vm.version')} (${System.getProperty('java.vendor')})")
println("Arch: ${System.getProperty('os.arch')}")
println(repeat('*', 60))

sourceSets {
    api {
        // API has no resources
        resources.srcDirs = []
    }
    main {
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
        resources {
            srcDir 'src/generated/resources'
        }
    }
    test {
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
    }
}

configurations {
    apiImplementation.extendsFrom(implementation)
    apiRuntimeOnly.extendsFrom(runtimeOnly)
}

minecraft {
    mappings channel: mappings_channel, version: mappings_version

    copyIdeResources = true

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        configureEach {
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'railcraft'

            args '--mixin', 'railcraft.mixins.json'

            mods {
                railcraft {
                    source sourceSets.main
                    source sourceSets.api
                    source sourceSets.test
                }
            }
        }

        client {
            workingDirectory project.file('run/client')
        }

        server {
            workingDirectory project.file('run/server')
        }

        data {
            workingDirectory project.file('run/data')

            args '--mod', 'railcraft', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }

        gameTestServer {
            workingDirectory project.file('run/test')
        }
    }
}

repositories {
    maven {
        name 'sponge'
        url 'https://repo.spongepowered.org/repository/maven-public'
    }
    maven {
        name 'JEI'
        url 'https://maven.blamejared.com/'
    }
}

dependencies {
    minecraft group: 'net.neoforged', name: 'forge', version: "$minecraft_version-$neo_version"

    annotationProcessor group: 'org.spongepowered', name: 'mixin', version: mixin_version, classifier: 'processor'
    testAnnotationProcessor group: 'org.spongepowered', name: 'mixin', version: mixin_version, classifier: 'processor'

    compileOnly fg.deobf("mezz.jei:jei-$minecraft_version-common-api:$jei_version")
    compileOnly fg.deobf("mezz.jei:jei-$minecraft_version-forge-api:$jei_version")
    runtimeOnly fg.deobf("mezz.jei:jei-$minecraft_version-forge:$jei_version")

}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            mod_version: mod_version
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.named('jar', Jar).configure {
    from([sourceSets.api.output, sourceSets.main.output])
    manifest {
        attributes([
                'Specification-Title'       : project.name,
                'Specification-Vendor'      : 'Sm0keySa1m0n, Edivad99',
                'Specification-Version'     : '1',
                'Implementation-Title'      : project.name,
                'Implementation-Version'    : project.version,
                'Implementation-Vendor'     : 'Sm0keySa1m0n, Edivad99',
                'Implementation-Commit'     : 'git rev-parse HEAD'.execute().text.trim(), // this exists if you used git clone else its null.
                'Implementation-Timestamp'  : new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'MixinConfigs'              : 'railcraft.mixins.json'
        ])
    }
    finalizedBy 'reobfJar'
}

task apiJar(type: Jar, group: 'build') {
    from sourceSets.api.output
    archiveClassifier = 'api'
    manifest.from(jar.manifest)
}

artifacts {
    archives jar
    archives apiJar
}

mixin {
    add sourceSets.main, 'railcraft.refmap.json'
}

tasks.register('makeChangelog', GitChangelogTask) {
    fromRepo = projectDir.absolutePath.toString()
    file = file('CHANGELOG.md')
    fromCommit = 'c6c8481d7b6f5cda609d621c2a521cf50f8645c6'
    templateContent = file('changelog.mustache').text
}

publishMods {
    displayName = "railcraft-reborn-$minecraft_version-$mod_version"
    version = mod_version
    type = BETA
    //changelog = file('CHANGELOG.md').text
    changelog = 'First public beta for Minecraft 1.20.1'

    modLoaders.add('neoforge')
    if (minecraft_version.equals('1.20.1')) {
        modLoaders.add('forge')
    }
    file = jar.archiveFile
    additionalFiles.from(apiJar)

    curseforge {
        projectId = '901491'
        accessToken = providers.environmentVariable('CURSEFORGE_TOKEN')
        minecraftVersions.add(minecraft_version)
    }
    modrinth {
        projectId = 'rO6kKst6'
        accessToken = providers.environmentVariable('MODRINTH_TOKEN')
        minecraftVersions.add(minecraft_version)
    }
}
