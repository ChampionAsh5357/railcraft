import static org.apache.commons.lang3.StringUtils.repeat
buildscript {
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7.+'
    }
}

plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'net.covers1624.signing' version '1.1.4'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}
apply plugin: 'org.spongepowered.mixin'

def isCI = System.getenv('GITHUB_ACTION')
def nightly = System.getenv('GITHUB_NIGHTLY')
def ref = System.getenv('GITHUB_PR_NUMBER')

def tag = nightly ? 'NIGHTLY' : 'CI'
def suffix = "-${tag}" + (ref ? "-${ref}" : '')

def signProps = [:]
if (System.getenv('SECURE_SIGN')) {
    println('Using Env variables for jar signing.')
    signProps['keyStore'] = System.getenv('KEY_STORE')
    signProps['storePass'] = System.getenv('KEY_STORE_PASS')
    signProps['keyPass'] = System.getenv('KEY_STORE_KEY_PASS')
} else if (project.hasProperty('keyStore')) {
    println('Using Project properties for jar signing.')
    signProps['keyStore'] = project.getProperty('keyStore')
    signProps['storePass'] = project.getProperty('keyStorePass')
    signProps['keyPass'] = project.getProperty('keyStoreKeyPass')
}

// does in fact follow the semantic versioning. (GAMEVER)-(MAJOR.MINOR.PATCH)[-[NIGHTLY | CI]][-RUNID.RUNINT]-HASH
version = "${minecraft_version}-${mod_version}"
if (isCI) {
    version = version + suffix
}
if (isCI || nightly) {
    version = version + '-' + 'git rev-parse --short HEAD'.execute().text.trim()
}

group = 'mods.railcraft'
archivesBaseName = 'railcraft'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

println(repeat('*', 60))
println('Project Version: ' + version)
if (isCI) {
    println("Running in Github Workflow ${tag}" + (ref ? " pull request ${ref}." : '.'))
}
if (!signProps.isEmpty()) {
    println('With .jar signing.')
}
println('Java: ' + System.getProperty('java.version'))
println('JVM: ' + System.getProperty('java.vm.version') + ' (' + System.getProperty('java.vendor') + ')')
println('Arch: ' + System.getProperty('os.arch'))
print(repeat('*', 60))

sourceSets {
    api {
    	// API has no resources
        resources.srcDirs = []
    }
    main {
    	compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
        resources {
            srcDir 'src/generated/resources'
        }
    }
}

configurations {
    apiImplementation.extendsFrom(implementation)
    apiRuntimeOnly.extendsFrom(runtimeOnly)
}

minecraft {
    if (project.mappings_channel == 'parchment_previous') {
        mappings channel: 'parchment', version: "${project.previous_minecraft_version}-${project.mappings_version}-${project.minecraft_version}"
    } else if (project.mappings_channel == 'parchment'){
        mappings channel: 'parchment', version: "${project.mappings_version}-${project.minecraft_version}"
    } else {
        mappings channel: 'official', version: "${project.minecraft_version}"
    }

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run/client')

            property 'forge.logging.console.level', 'debug'

            args '--mixin', 'railcraft.mixins.json'

            mods {
                railcraft {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }

        server {
            workingDirectory project.file('run/server')

            property 'forge.logging.console.level', 'debug'

            args '--mixin', 'railcraft.mixins.json'

            mods {
                railcraft {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }

        data {
            workingDirectory project.file('run/data')

            property 'forge.logging.console.level', 'debug'

            args '--mod', 'railcraft', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                railcraft {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }
    }
}

repositories {
    maven {
        name 'sponge'
        url 'https://repo.spongepowered.org/repository/maven-public'
    }
    maven {
        name 'JEI'
        url 'https://dvs1.progwml6.com/files/maven'
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"

    annotationProcessor "org.spongepowered:mixin:${project.mixin_version}:processor"
    testAnnotationProcessor "org.spongepowered:mixin:${project.mixin_version}:processor"

    compileOnly fg.deobf("mezz.jei:jei-${project.minecraft_version}-common-api:${project.jei_version}")
    compileOnly fg.deobf("mezz.jei:jei-${project.minecraft_version}-forge-api:${project.jei_version}")
    runtimeOnly fg.deobf("mezz.jei:jei-${project.minecraft_version}-forge:${project.jei_version}")
}

jar {
    from([sourceSets.api.output, sourceSets.main.output])
    manifest {
        attributes([
            'Implementation-Title': project.name,
            'Implementation-Version': project.version,
            'Implementation-Commit': 'git rev-parse HEAD'.execute().text.trim(), // this exists if you used git clone else its null.
            'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            'MixinConfigs': 'railcraft.mixins.json'
        ])
    }
    finalizedBy('reobfJar')
}

mixin {
    add sourceSets.main, 'railcraft.refmap.json'
}

signing {
    if (!signProps.isEmpty()) {
        jars {
            sign jar
            after 'reobfJar'

            keyStore = signProps.keyStore
            storePass = signProps.storePass

            alias = 'railcraft'
            keyPass = signProps.keyPass
        }
    }
}
