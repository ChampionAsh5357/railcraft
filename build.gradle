import se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask
import static org.apache.commons.lang3.StringUtils.repeat

plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'net.neoforged.gradle.userdev' version '7.0.5'
    //id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'net.neoforged.gradle.mixin' version '[7.0.5,)'
    id 'se.bjurr.gitchangelog.git-changelog-gradle-plugin' version '1.81.3'
    id 'me.modmuss50.mod-publish-plugin' version '0.3.6'
}

version = "$minecraft_version-$mod_version"

group = 'mods.railcraft'
base {
    archivesName = 'railcraft-reborn'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
        vendor = JvmVendorSpec.JETBRAINS
    }
}

println(repeat('*', 60))
println("Project Version: $version")
println("Java: ${System.getProperty('java.version')}")
println("JVM: ${System.getProperty('java.vm.version')} (${System.getProperty('java.vendor')})")
println("Arch: ${System.getProperty('os.arch')}")
println(repeat('*', 60))

sourceSets {
    api {
        // API has no resources
        resources.srcDirs = []
        compileClasspath += sourceSets.main.compileClasspath
        runtimeClasspath += sourceSets.main.runtimeClasspath
    }
    main {
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
        resources {
            srcDir 'src/generated/resources'
            exclude '.cache'
        }
    }
    test {
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
    }
}

minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')

runs {
    configureEach {
        systemProperty 'forge.logging.console.level', 'debug'
        systemProperty 'forge.enabledGameTestNamespaces', 'railcraft'
        modSource project.sourceSets.api
        modSource project.sourceSets.main
        modSource project.sourceSets.test
        //jvmArgs '-XX:+AllowEnhancedClassRedefinition', '-XX:+IgnoreUnrecognizedVMOptions'
        //'-XX:+AllowRedefinitionToAddDeleteMethods'
    }

    client {
    }

    server {
        programArgument '--nogui'
    }

    gameTestServer {
    }

    data {
        programArguments.addAll '--mod', 'railcraft', '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

repositories {
    maven {
        name 'sponge'
        url 'https://repo.spongepowered.org/repository/maven-public'
    }
    maven {
        name 'JEI/Patchouli'
        url 'https://maven.blamejared.com/'
    }
    maven {
        name 'curseforge'
        url 'https://www.cursemaven.com'
    }
}

dependencies {
    implementation group: 'net.neoforged', name: 'neoforge', version: neo_version

    annotationProcessor group: 'org.spongepowered', name: 'mixin', version: mixin_version, classifier: 'processor'
    testAnnotationProcessor group: 'org.spongepowered', name: 'mixin', version: mixin_version, classifier: 'processor'
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'

    compileOnly "mezz.jei:jei-$minecraft_version-common-api:$jei_version"
    compileOnly "mezz.jei:jei-$minecraft_version-forge-api:$jei_version"
    //runtimeOnly "mezz.jei:jei-$minecraft_version-forge:$jei_version"

    compileOnly "vazkii.patchouli:Patchouli:$patchouli_version:api"
    //runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:$patchouli_version")
}

test {
    useJUnitPlatform()
    testLogging {
        events 'passed', 'skipped', 'failed'
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            mod_version: mod_version
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

task apiJar(type: Jar, group: 'build') {
    from sourceSets.api.output
    archiveClassifier = 'api'
    manifest.from(jar.manifest)
}

artifacts {
    archives jar
    archives apiJar
}


def penultimateTag = { ->
    def stdout = new ByteArrayOutputStream()
    try {
        project.exec { ExecSpec spec ->
            spec.commandLine('git', 'describe', '--abbrev=0', '--tags', 'HEAD~').standardOutput(stdout)
        }.assertNormalExitValue().rethrowFailure()
    } catch (Exception e) {
        throw new IllegalStateException("Failed to get the tag; check if 'git' is on the PATH", e)
    }
    return stdout.toString()
}

tasks.register('makeChangelog', GitChangelogTask) {
    fromRepo = projectDir.absolutePath.toString()
    fromRevision = penultimateTag()
    toRevision = 'HEAD'
    file = file('CHANGELOG.md')
    untaggedName = 'Next release'
    templateContent = file('changelog.mustache').text
    ignoreCommitsIfMessageMatches = '^.*Merge branch.*$'
}

publishMods {
    displayName = "railcraft-reborn-$minecraft_version-$mod_version"
    version = mod_version
    type = BETA

    def changelogFile = file('CHANGELOG.md')
    changelog = changelogFile.exists() ? changelogFile.text : 'CHANGELOG.md not found'

    modLoaders.add('neoforge')
    file = jar.archiveFile
    additionalFiles.from(apiJar)

    curseforge {
        projectId = '901491'
        accessToken = providers.environmentVariable('CURSEFORGE_TOKEN')
        minecraftVersions.add(minecraft_version)
    }
    modrinth {
        projectId = 'rO6kKst6'
        accessToken = providers.environmentVariable('MODRINTH_TOKEN')
        minecraftVersions.add(minecraft_version)
    }
}
